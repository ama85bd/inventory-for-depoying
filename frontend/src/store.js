import { applyMiddleware, combineReducers, compose, createStore } from "redux";
import thunk from "redux-thunk";
import {
  userCreateReducer,
  userDeleteReducer,
  userDetailsReducer,
  userPassUpdateReducer,
  userRegisterReducer,
  userSigninReducer,
  usersListReducer,
  userUpdateReducer,
} from "./reducers/userRedures";
import {
  stationaryListReducer,
  stationaryTypeCreateReducer,
  stationaryTypeDeleteReducer,
  stationaryTypeDetailsReducer,
  stationaryTypeUpdateReducer,
} from "./reducers/stationaryReducers";
import {
  sourceCreateReducer,
  sourceDeleteReducer,
  sourceDetailsReducer,
  sourceListReducer,
  sourceUpdateReducer,
} from "./reducers/sourceReducers";
import {
  allStationaryReducer,
  oneAllStationaryReducer,
  purchaseUpdateReducer,
  searchStationaryAssignEditReducer,
  searchStationaryAssignReducer,
  stationaryAssignDeleteReducer,
  stationaryAssignReducer,
  stationaryAssignUpdateReducer,
  stationaryPurchaseCreateReducer,
  stationaryPurchaseDeleteReducer,
  stationaryPurchaseDetailsReducer,
  stationaryPurchaseListReducer,
  stationaryPurchaseOneDetailsReducer,
  stationaryTypeTotalReducer,
} from "./reducers/stationaryPurchaseReducers";
import {
  deviceListReducer,
  devicePurchaseListReducer,
  deviceTypeCreateReducer,
  deviceTypeDeleteReducer,
  deviceTypeDetailsReducer,
  deviceTypeUpdateReducer,
  devicePurchaseCreateReducer,
  devicePurchaseOneDetailsReducer,
  devicePurchaseUpdateReducer,
  devicePurchaseDeleteReducer,
  devicePropertiesListReducer,
  devicePropertiesCreateReducer,
  deviceSerialReducer,
  devicePropertiesDetailsReducer,
  devicePropertiesUpdateReducer,
  devicePropertiesDeleteReducer,
  deviceDetailsReducer,
  deviceConsumeCreateReducer,
  devicePurchaseAssignUpdateReducer,
  deviceAssignListReducer,
  deviceConsumeDeleteReducer,
  deviceSearchReducer,
  deviceBrandReducer,
  deviceProAllReducer,
  deviceHomeAllReducer,
  devicePropertiesAddReducer,
  devicePropertiesRemoveReducer,
} from "./reducers/deviceReducers";
const initialState = {
  userSignin: {
    userInfo: localStorage.getItem("userInfo")
      ? JSON.parse(localStorage.getItem("userInfo"))
      : null,
  },
};
const reducer = combineReducers({
  userList: usersListReducer,
  userDetails: userDetailsReducer,
  userSignin: userSigninReducer,
  userRegister: userRegisterReducer,
  userCreate: userCreateReducer,
  userDelete: userDeleteReducer,
  userUpdate: userUpdateReducer,
  userPassUpdate: userPassUpdateReducer,
  stationaryTypeDelete: stationaryTypeDeleteReducer,
  stationaryTypeUpdate: stationaryTypeUpdateReducer,
  stationaryTypeList: stationaryListReducer,
  stationaryTypeCreate: stationaryTypeCreateReducer,
  stationaryTypeDetails: stationaryTypeDetailsReducer,
  sourceList: sourceListReducer,
  sourceCreate: sourceCreateReducer,
  sourceDetails: sourceDetailsReducer,
  sourceUpdate: sourceUpdateReducer,
  sourceDelete: sourceDeleteReducer,
  stationaryPurchaseList: stationaryPurchaseListReducer,
  stationaryPurchaseCreate: stationaryPurchaseCreateReducer,
  stationaryPurchaseDetails: stationaryPurchaseDetailsReducer,
  stationaryPurchaseOneDetails: stationaryPurchaseOneDetailsReducer,
  statinaryPurchaseUpdate: purchaseUpdateReducer,
  stationaryPurchaseDelete: stationaryPurchaseDeleteReducer,
  allStationaryList: allStationaryReducer,
  oneAllStationary: oneAllStationaryReducer,
  assignStationary: stationaryAssignReducer,
  searchStationaryAssign: searchStationaryAssignReducer,
  searchStationaryAssignEdit: searchStationaryAssignEditReducer,
  stationaryTypeTotal: stationaryTypeTotalReducer,
  stationaryAssignUpdate: stationaryAssignUpdateReducer,
  stationaryAssignDelete: stationaryAssignDeleteReducer,
  deviceTypeList: deviceListReducer,
  deviceTypeCreate: deviceTypeCreateReducer,
  deviceTypeDetails: deviceTypeDetailsReducer,
  deviceTypeUpdate: deviceTypeUpdateReducer,
  deviceTypeDelete: deviceTypeDeleteReducer,
  devicePurchaseList: devicePurchaseListReducer,
  devicePurchaseCreate: devicePurchaseCreateReducer,
  devicePurchaseOneDetails: devicePurchaseOneDetailsReducer,
  devicePurchaseUpdate: devicePurchaseUpdateReducer,
  devicePurchaseDelete: devicePurchaseDeleteReducer,
  devicePropertiesList: devicePropertiesListReducer,
  devicePropertiesCreate: devicePropertiesCreateReducer,
  deviceSerial: deviceSerialReducer,
  devicePropertiesDetails: devicePropertiesDetailsReducer,
  devicePropertiesUpdate: devicePropertiesUpdateReducer,
  devicePropertiesDelete: devicePropertiesDeleteReducer,
  deviceDetails: deviceDetailsReducer,
  deviceConsumeCreate: deviceConsumeCreateReducer,
  devicePurchaseAssignUpdate: devicePurchaseAssignUpdateReducer,
  deviceAssignList: deviceAssignListReducer,
  deviceConsumeDelete: deviceConsumeDeleteReducer,
  deviceSearch: deviceSearchReducer,
  deviceBrand: deviceBrandReducer,
  deviceProAll: deviceProAllReducer,
  deviceHomeAll: deviceHomeAllReducer,
  devicePropertiesAdd: devicePropertiesAddReducer,
  devicePropertiesRemove: devicePropertiesRemoveReducer,
});
const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;
const store = createStore(
  reducer,
  initialState,
  composeEnhancer(applyMiddleware(thunk))
);

export default store;
